import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id 'jacoco'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id 'net.nemerosa.versioning' version '2.8.2'
}
def artifact_version = '0.1.11'
//mvn jira request https://issues.sonatype.org/browse/OSSRH-60165
group 'com.github.dave99galloway'
version artifact_version

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/dave99galloway/TypeSafeMapMap"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
//        maven {
//            name = "OSSRH"
//            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//            credentials {
//                username = System.getenv("MAVEN_USERNAME")
//                password = System.getenv("MAVEN_PASSWORD")
//            }
//        }
        afterEvaluate {
            publications {
                libJar(MavenPublication) {
                    from components["kotlin"]
                    artifact(tasks["sourcesJar"])
                    pom {
                        description.set("repro of https://github.com/clarkbw/github-registry-repro/blob/master/build.gradle")
                    }
                }
            }
        }
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

    testCompile group: 'junit', name: 'junit', version: '4.12'

    testCompile "org.assertj:assertj-core:3.11.1"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


test {
    useJUnit()
    testLogging.showStandardStreams = true
    maxHeapSize = '1G'
    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: $descriptor")
    }
    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: $descriptor produced standard out/err: $event.message")
    }
    finalizedBy jacocoTestReport
}

jar {
    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Revision': versioning.info.commit,
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                'artifact_version': artifact_version,
                'manifest-customisation': 'http://andresalmiray.com/customize-jar-manifest-entries-with-maven-gradle/'
        )
    }
}

task sourcesJar(type: Jar, group: "build") {
    archiveClassifier.set("sources")
    from(sourceSets.main.allSource)
}

shadowJar {
    baseName = 'TypeSafeMapMap-shadow'
    classifier = ''
    archiveVersion = '' // artifact_version
    minimize()
    exclude 'kotlin.stdlib'
    exclude 'kotlin-runtime.jar'
    dependencies {
        exclude(dependency {
            it.moduleGroup == 'org.jetbrains.kotlin'
        })
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}