import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id("org.jetbrains.dokka") version "1.4.0"
    id 'jacoco'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id 'net.nemerosa.versioning' version '2.8.2'
    id 'signing'
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

def artifact_version = '0.1.14'
def artifactName = 'TypeSafeMapMap'
//mvn jira request https://issues.sonatype.org/browse/OSSRH-60165
group 'com.github.dave99galloway'
version artifact_version


task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId group
            artifactId artifactName
            version artifact_version

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.eachWithIndex {sigFile, i->
                artifact(sigFile) {
                    def matcher = sigFile.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = "signed-$i" //matcher.group(1)
                    } else {
                        classifier = "unknown-$i"
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}
//
//abstract class CheckCreds extends DefaultTask {
//    @TaskAction
//    def checkTheCreds() {
//        println "sonatypeUsername=$sonatypeUsername"
//    }
//}

//// Create a task using the task type
//tasks.register('checkCreds') {
//    doLast {
//        println "sonatypeUsername=$sonatypeUsername"
//    }
//}
//

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A type safe Map of Maps where the outer map items are stored by type of the values in the inner maps\''
            name 'Type Safe Map Map'
            url 'https://github.com/dave99galloway/TypeSafeMapMap'
            organization {
                name 'com.github.dave99galloway'
                url 'https://github.com/dave99galloway'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/dave99galloway/TypeSafeMapMap/issues'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/dave99galloway/TypeSafeMapMap'
                connection 'scm:git:git://github.com/dave99galloway/TypeSafeMapMap.git'
                developerConnection 'scm:git:ssh://github.com/dave99galloway/TypeSafeMapMap.git'
            }
            developers {
                developer {
                    name 'dave.99.galloway'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

//
//def pomConfig = {
//    licenses {
//        license {
//            name "The Apache Software License, Version 2.0"
//            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
//            distribution "repo"
//        }
//    }
//    developers {
//        developer {
//            id "dave99galloway"
//            name "dave galloway"
//            email "dave99galloway@users.noreply.github.com"
//        }
//    }
//
//    scm {
//        url "https://github.com/dave99galloway/TypeSafeMapMap"
//    }
//}
//
//publishing {
//    publications {
//        mavenPublication(MavenPublication) {
//            from components.kotlin
////            artifact sourcesJar
////            artifact javadocJar
//            groupId 'com.github.dave99galloway.TypeSafeMapMap'
//            artifactId 'typesafemapmap'
//            version "$artifact_version"
//            pom.withXml {
//                def root = asNode()
//                root.appendNode('description', 'A type safe Map of Maps where the outer map items are stored by type of the values in the inner maps')
//                root.appendNode('name', 'TypeSafeMapMap (TSMM)')
//                root.appendNode('url', 'https://github.com/dave99galloway/TypeSafeMapMap')
//                root.children().last() + pomConfig
//            }
//        }
//    }
//    repositories {
////        maven {
////            name = "GitHubPackages"
////            url = "https://maven.pkg.github.com/dave99galloway/TypeSafeMapMap"
////            credentials {
////                username = System.getenv("GITHUB_ACTOR")
////                password = System.getenv("GITHUB_TOKEN")
////            }
////        }
//        maven {
//            name = "OSSRH"
//            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//            credentials {
//                username = System.getenv("MAVEN_USERNAME")
//                password = System.getenv("MAVEN_PASSWORD")
//            }
//        }
//        afterEvaluate {
//            publications {
//                libJar(MavenPublication) {
//                    from components["kotlin"]
//                    artifact(tasks["sourcesJar"])
//                    pom {
//                        description.set("repro of https://github.com/clarkbw/github-registry-repro/blob/master/build.gradle")
//                    }
//                }
//            }
//        }
//    }
//}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

    testCompile group: 'junit', name: 'junit', version: '4.12'

    testCompile "org.assertj:assertj-core:3.11.1"
    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.4.0")

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}



test {
    useJUnit()
    testLogging.showStandardStreams = true
    maxHeapSize = '1G'
    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: $descriptor")
    }
    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: $descriptor produced standard out/err: $event.message")
    }
    finalizedBy jacocoTestReport
}

jar {
   // classifier "lib"

    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Revision': versioning.info.commit,
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                'artifact_version': artifact_version,
                'manifest-customisation': 'http://andresalmiray.com/customize-jar-manifest-entries-with-maven-gradle/'
        )
    }
}
//
//task sourcesJar(type: Jar, group: "build", dependsOn: classes) {
//    archiveClassifier.set("sources")
//    from(sourceSets.main.allSource)
//}
//
//javadoc {
//    source = sourceSets.main.allJava
//    classpath = configurations.compile
//}
//
//javadoc.failOnError = false
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//artifacts {
//    archives sourcesJar
//    archives javadocJar
//}

shadowJar {
    baseName = 'TypeSafeMapMap'
    classifier = 'shadow'
    archiveVersion = '' // artifact_version
    minimize()
    exclude 'kotlin.stdlib'
    exclude 'kotlin-runtime.jar'
    dependencies {
        exclude(dependency {
            it.moduleGroup == 'org.jetbrains.kotlin'
        })
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}